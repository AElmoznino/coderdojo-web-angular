directive @mark(
  """Marks if field is localized"""
  localized: Boolean

  """Marks if value is default"""
  default: Boolean

  """Marks if the locale is a part of the default fallback"""
  fallback: Boolean

  """Ordered list of fallback locales"""
  fallbackLocales: [String!]

  """Marks the pageInfo"""
  pageInfo: Boolean

  """Marks an aggregate type"""
  aggregate: Boolean

  """Marks a countable type"""
  countable: Boolean

  """Marks an edge type"""
  edge: Boolean

  """Marks a locale enum"""
  locale: Boolean

  """Marks asset url handler"""
  url: Boolean

  """Marks type of mutation kind"""
  mutationKind: _MutationKind

  """Marks kind of mutation input field"""
  mutationInputFieldKind: _MutationInputFieldKind

  """Marks filter and links to parent type"""
  filter: String

  """Marks filter kind"""
  filterKind: _FilterKind

  """Marks if corresponding field is list"""
  filterIsList: Boolean

  """Marks order by"""
  order: Boolean

  """Marks order direction"""
  orderDirection: _OrderDirection

  """Link to the Main type of the connection"""
  connection: String

  """Marks localizations field"""
  localizations: Boolean

  """Marks versions field on model"""
  modelVersions: Boolean

  """Marks document version field on Query"""
  documentVersion: Boolean

  """Marks stages field"""
  stages: Boolean

  """Specifies system createdAt field"""
  createdAtField: String

  """Specifies system updatedAt field"""
  updatedAtField: String

  """Specifies relation input kind"""
  relationInputKind: _RelationInputKind

  """
  Specifies relation kind (e.g. union relation or regular field relation)
  """
  relationKind: _RelationKind

  """Specifies relation input cardinality"""
  relationInputCardinality: _RelationInputCardinality

  """Specifies relation input cardinality of reverse side"""
  reverseRelationInputCardinality: _RelationInputCardinality

  """Specifies model create input type"""
  createInputType: String

  """Specifies model create localization type"""
  createLocalizationInputType: String

  """Specifies GraphCMS field type"""
  fieldType: String

  """Specifies WhereUniqueInput type name"""
  whereUniqueInput: String

  """Specifies whether type is connect input"""
  isConnectInput: Boolean

  """
  Specifies relation input to be for abstract member type, not known master / origin side
  """
  isMemberInput: Boolean

  """Specifies union type name"""
  unionType: Boolean

  """Specifies model a type is part of"""
  model: String

  """Specifies mode of system DateTime fields"""
  systemDateTimeFieldVariation: _SystemDateTimeFieldVariation

  """
  If versioned, documents of this model will be able to hold this amount of versions per stage
  """
  versionRetentionCount: Int

  """If versioned, on publishing versions older than x days will be dropped"""
  versionRetentionPeriod: Int

  """Adds field validations"""
  validations: String

  """The model's storage ID"""
  storageId: String

  """Marks richText field return type"""
  isRichTextType: Boolean

  """Marks list richText field return type"""
  isListRichText: Boolean

  """The name of the associated RichText type"""
  richTextType: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | ENUM | INPUT_FIELD_DEFINITION | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @permission(
  """Policy resource names."""
  resources: [String!]

  """Policy action names."""
  actions: [String!]
) on FIELD_DEFINITION

directive @psql(
  """postgres table name"""
  table: String

  """postgres localization table name"""
  localizationTable: String

  """postgres column name"""
  column: [String!]

  """hardcoded postgres id value for enums"""
  id: String

  """postgres join on name"""
  join: [String!]

  """Specifies column for system id field"""
  idColumn: String

  """Specifies column for native sorting for relational fields"""
  prio: String

  """Specifies columns for union member fields"""
  memberColumns: [String!]

  """Specifies system updatedAt column"""
  updatedAtColumn: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION | ENUM | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @remote(
  """url to fetch the remote content from"""
  url: String!

  """HTTP method used to fetch the remote content from"""
  method: String!

  """optional headers that will be sent in the remote call"""
  headers: Json

  """list of field apiIds that should be send as payload in the remote call"""
  requestParamFields: [String!]!

  """
  list of field storage ids that will available for templates and parameters for the remote call
  """
  payloadFields: [String!]!
) on FIELD_DEFINITION

enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
}

enum _MutationInputFieldKind {
  scalar
  richText
  richTextWithEmbeds
  enum
  relation
  union
  virtual
}

enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
}

enum _OrderDirection {
  asc
  desc
}

enum _RelationInputCardinality {
  one
  many
}

enum _RelationInputKind {
  create
  update
}

enum _RelationKind {
  regular
  union
}

enum _SystemDateTimeFieldVariation {
  base
  localization
  combined
}

type Aggregate {
  count: Int!
}

"""Asset system model"""
type Asset implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [sv, en]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Asset!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Asset!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The file handle"""
  handle: String!

  """The file name"""
  fileName: String!

  """The height of the file"""
  height: Float

  """The file width"""
  width: Float

  """The file size"""
  size: Float

  """The mime type of the file"""
  mimeType: String

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}

input AssetCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
}

input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
}

input AssetUpdateLocalizationDataInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input AssetUpdateManyInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
}

input AssetUpdateManyLocalizationDataInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
  """Document search"""
  where: AssetWhereInput!

  """Update many input"""
  data: AssetUpdateManyInput!
}

input AssetUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Document to update"""
  data: AssetUpdateInput!
}

input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Upsert data"""
  data: AssetUpsertInput!
}

"""Identifies documents"""
input AssetWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  handle: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values that are contained in given list."""
  handle_in: [String!]

  """All values that are not contained in given list."""
  handle_not_in: [String!]

  """All values containing the given string."""
  handle_contains: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values starting with the given string."""
  handle_starts_with: String

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values not ending with the given string"""
  handle_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values that are not contained in given list."""
  height_not_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values that are not contained in given list."""
  width_not_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}

input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at first position"""
  start: Boolean

  """Connect document at last position"""
  end: Boolean
}

"""
A course within a particular Difficulty that contains one or more lessons in a certain order.
"""
type Course implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Course!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """
  Name of the course, e.g. "HTML for Beginners"
  """
  courseName: String!
  lessons(
    where: LessonWhereInput
    orderBy: LessonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `lessons` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): [Lesson!]!
  courseDescription: String!
  courseId: String!
  difficulty(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `difficulty` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Difficulty

  """Name(s) of instructor(s)"""
  instructors: [String!]!

  """List of Course versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input CourseConnectInput {
  """Document to connect"""
  where: CourseWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge!]!
  aggregate: Aggregate!
}

input CourseCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  courseName: String!
  lessons: LessonCreateManyInlineInput
  courseDescription: String!
  courseId: String!
  difficulty: DifficultyCreateOneInlineInput
  instructors: [String!]
}

input CourseCreateManyInlineInput {
  """Create and connect multiple existing Course documents"""
  create: [CourseCreateInput!]

  """Connect multiple existing Course documents"""
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneInlineInput {
  """Create and connect one Course document"""
  create: CourseCreateInput

  """Connect one existing Course document"""
  connect: CourseWhereUniqueInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input CourseManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  courseName: String

  """All values that are not equal to given value."""
  courseName_not: String

  """All values that are contained in given list."""
  courseName_in: [String!]

  """All values that are not contained in given list."""
  courseName_not_in: [String!]

  """All values containing the given string."""
  courseName_contains: String

  """All values not containing the given string."""
  courseName_not_contains: String

  """All values starting with the given string."""
  courseName_starts_with: String

  """All values not starting with the given string."""
  courseName_not_starts_with: String

  """All values ending with the given string."""
  courseName_ends_with: String

  """All values not ending with the given string"""
  courseName_not_ends_with: String
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  courseDescription: String

  """All values that are not equal to given value."""
  courseDescription_not: String

  """All values that are contained in given list."""
  courseDescription_in: [String!]

  """All values that are not contained in given list."""
  courseDescription_not_in: [String!]

  """All values containing the given string."""
  courseDescription_contains: String

  """All values not containing the given string."""
  courseDescription_not_contains: String

  """All values starting with the given string."""
  courseDescription_starts_with: String

  """All values not starting with the given string."""
  courseDescription_not_starts_with: String

  """All values ending with the given string."""
  courseDescription_ends_with: String

  """All values not ending with the given string"""
  courseDescription_not_ends_with: String
  courseId: String

  """All values that are not equal to given value."""
  courseId_not: String

  """All values that are contained in given list."""
  courseId_in: [String!]

  """All values that are not contained in given list."""
  courseId_not_in: [String!]

  """All values containing the given string."""
  courseId_contains: String

  """All values not containing the given string."""
  courseId_not_contains: String

  """All values starting with the given string."""
  courseId_starts_with: String

  """All values not starting with the given string."""
  courseId_not_starts_with: String

  """All values ending with the given string."""
  courseId_ends_with: String

  """All values not ending with the given string"""
  courseId_not_ends_with: String
  difficulty: DifficultyWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  instructors: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  instructors_not: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  instructors_contains_all: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  instructors_contains_some: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  instructors_contains_none: [String!]
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  courseName_ASC
  courseName_DESC
  courseDescription_ASC
  courseDescription_DESC
  courseId_ASC
  courseId_DESC
  instructors_ASC
  instructors_DESC
}

input CourseUpdateInput {
  courseName: String
  lessons: LessonUpdateManyInlineInput
  courseDescription: String
  courseId: String
  difficulty: DifficultyUpdateOneInlineInput
  instructors: [String!]
}

input CourseUpdateManyInlineInput {
  """Create and connect multiple Course documents"""
  create: [CourseCreateInput!]

  """Connect multiple existing Course documents"""
  connect: [CourseConnectInput!]

  """
  Override currently-connected documents with multiple existing Course documents
  """
  set: [CourseWhereUniqueInput!]

  """Update multiple Course documents"""
  update: [CourseUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Course documents"""
  upsert: [CourseUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Course documents"""
  disconnect: [CourseWhereUniqueInput!]

  """Delete multiple Course documents"""
  delete: [CourseWhereUniqueInput!]
}

input CourseUpdateManyInput {
  courseDescription: String
  instructors: [String!]
}

input CourseUpdateManyWithNestedWhereInput {
  """Document search"""
  where: CourseWhereInput!

  """Update many input"""
  data: CourseUpdateManyInput!
}

input CourseUpdateOneInlineInput {
  """Create and connect one Course document"""
  create: CourseCreateInput

  """Update single Course document"""
  update: CourseUpdateWithNestedWhereUniqueInput

  """Upsert single Course document"""
  upsert: CourseUpsertWithNestedWhereUniqueInput

  """Connect existing Course document"""
  connect: CourseWhereUniqueInput

  """Disconnect currently connected Course document"""
  disconnect: Boolean

  """Delete currently connected Course document"""
  delete: Boolean
}

input CourseUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CourseWhereUniqueInput!

  """Document to update"""
  data: CourseUpdateInput!
}

input CourseUpsertInput {
  """Create document if it didn't exist"""
  create: CourseCreateInput!

  """Update document if it exists"""
  update: CourseUpdateInput!
}

input CourseUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: CourseWhereUniqueInput!

  """Upsert data"""
  data: CourseUpsertInput!
}

"""Identifies documents"""
input CourseWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  courseName: String

  """All values that are not equal to given value."""
  courseName_not: String

  """All values that are contained in given list."""
  courseName_in: [String!]

  """All values that are not contained in given list."""
  courseName_not_in: [String!]

  """All values containing the given string."""
  courseName_contains: String

  """All values not containing the given string."""
  courseName_not_contains: String

  """All values starting with the given string."""
  courseName_starts_with: String

  """All values not starting with the given string."""
  courseName_not_starts_with: String

  """All values ending with the given string."""
  courseName_ends_with: String

  """All values not ending with the given string"""
  courseName_not_ends_with: String
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  courseDescription: String

  """All values that are not equal to given value."""
  courseDescription_not: String

  """All values that are contained in given list."""
  courseDescription_in: [String!]

  """All values that are not contained in given list."""
  courseDescription_not_in: [String!]

  """All values containing the given string."""
  courseDescription_contains: String

  """All values not containing the given string."""
  courseDescription_not_contains: String

  """All values starting with the given string."""
  courseDescription_starts_with: String

  """All values not starting with the given string."""
  courseDescription_not_starts_with: String

  """All values ending with the given string."""
  courseDescription_ends_with: String

  """All values not ending with the given string"""
  courseDescription_not_ends_with: String
  courseId: String

  """All values that are not equal to given value."""
  courseId_not: String

  """All values that are contained in given list."""
  courseId_in: [String!]

  """All values that are not contained in given list."""
  courseId_not_in: [String!]

  """All values containing the given string."""
  courseId_contains: String

  """All values not containing the given string."""
  courseId_not_contains: String

  """All values starting with the given string."""
  courseId_starts_with: String

  """All values not starting with the given string."""
  courseId_not_starts_with: String

  """All values ending with the given string."""
  courseId_ends_with: String

  """All values not ending with the given string"""
  courseId_not_ends_with: String
  difficulty: DifficultyWhereInput

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  instructors: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  instructors_not: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  instructors_contains_all: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  instructors_contains_some: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  instructors_contains_none: [String!]
}

"""References Course record uniquely"""
input CourseWhereUniqueInput {
  id: ID
  courseName: String
  courseId: String
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard
for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601
standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A difficulty level, could be beginner, intermediate etc."""
type Difficulty implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Difficulty!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  courses(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `courses` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): [Course!]!
  difficultyName: String!

  """Description shown on start page."""
  difficultyDescription: String!
  difficultyId: String!

  """
  Description that shows on the overview page for the particular difficulty.
  """
  difficultyOverviewDescription: String

  """List of Difficulty versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input DifficultyConnectInput {
  """Document to connect"""
  where: DifficultyWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type DifficultyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DifficultyEdge!]!
  aggregate: Aggregate!
}

input DifficultyCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  courses: CourseCreateManyInlineInput
  difficultyName: String!
  difficultyDescription: String!
  difficultyId: String!
  difficultyOverviewDescription: String
}

input DifficultyCreateManyInlineInput {
  """Create and connect multiple existing Difficulty documents"""
  create: [DifficultyCreateInput!]

  """Connect multiple existing Difficulty documents"""
  connect: [DifficultyWhereUniqueInput!]
}

input DifficultyCreateOneInlineInput {
  """Create and connect one Difficulty document"""
  create: DifficultyCreateInput

  """Connect one existing Difficulty document"""
  connect: DifficultyWhereUniqueInput
}

"""An edge in a connection."""
type DifficultyEdge {
  """The item at the end of the edge."""
  node: Difficulty!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Difficulty Level"""
enum DifficultyLevel {
  Advanced
  Beginner
  Intermediate
}

"""Identifies documents"""
input DifficultyManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [DifficultyWhereInput!]

  """Logical OR on all given filters."""
  OR: [DifficultyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DifficultyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  difficultyName: String

  """All values that are not equal to given value."""
  difficultyName_not: String

  """All values that are contained in given list."""
  difficultyName_in: [String!]

  """All values that are not contained in given list."""
  difficultyName_not_in: [String!]

  """All values containing the given string."""
  difficultyName_contains: String

  """All values not containing the given string."""
  difficultyName_not_contains: String

  """All values starting with the given string."""
  difficultyName_starts_with: String

  """All values not starting with the given string."""
  difficultyName_not_starts_with: String

  """All values ending with the given string."""
  difficultyName_ends_with: String

  """All values not ending with the given string"""
  difficultyName_not_ends_with: String
  difficultyDescription: String

  """All values that are not equal to given value."""
  difficultyDescription_not: String

  """All values that are contained in given list."""
  difficultyDescription_in: [String!]

  """All values that are not contained in given list."""
  difficultyDescription_not_in: [String!]

  """All values containing the given string."""
  difficultyDescription_contains: String

  """All values not containing the given string."""
  difficultyDescription_not_contains: String

  """All values starting with the given string."""
  difficultyDescription_starts_with: String

  """All values not starting with the given string."""
  difficultyDescription_not_starts_with: String

  """All values ending with the given string."""
  difficultyDescription_ends_with: String

  """All values not ending with the given string"""
  difficultyDescription_not_ends_with: String
  difficultyId: String

  """All values that are not equal to given value."""
  difficultyId_not: String

  """All values that are contained in given list."""
  difficultyId_in: [String!]

  """All values that are not contained in given list."""
  difficultyId_not_in: [String!]

  """All values containing the given string."""
  difficultyId_contains: String

  """All values not containing the given string."""
  difficultyId_not_contains: String

  """All values starting with the given string."""
  difficultyId_starts_with: String

  """All values not starting with the given string."""
  difficultyId_not_starts_with: String

  """All values ending with the given string."""
  difficultyId_ends_with: String

  """All values not ending with the given string"""
  difficultyId_not_ends_with: String
  difficultyOverviewDescription: String

  """All values that are not equal to given value."""
  difficultyOverviewDescription_not: String

  """All values that are contained in given list."""
  difficultyOverviewDescription_in: [String!]

  """All values that are not contained in given list."""
  difficultyOverviewDescription_not_in: [String!]

  """All values containing the given string."""
  difficultyOverviewDescription_contains: String

  """All values not containing the given string."""
  difficultyOverviewDescription_not_contains: String

  """All values starting with the given string."""
  difficultyOverviewDescription_starts_with: String

  """All values not starting with the given string."""
  difficultyOverviewDescription_not_starts_with: String

  """All values ending with the given string."""
  difficultyOverviewDescription_ends_with: String

  """All values not ending with the given string"""
  difficultyOverviewDescription_not_ends_with: String
}

enum DifficultyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  difficultyName_ASC
  difficultyName_DESC
  difficultyDescription_ASC
  difficultyDescription_DESC
  difficultyId_ASC
  difficultyId_DESC
  difficultyOverviewDescription_ASC
  difficultyOverviewDescription_DESC
}

input DifficultyUpdateInput {
  courses: CourseUpdateManyInlineInput
  difficultyName: String
  difficultyDescription: String
  difficultyId: String
  difficultyOverviewDescription: String
}

input DifficultyUpdateManyInlineInput {
  """Create and connect multiple Difficulty documents"""
  create: [DifficultyCreateInput!]

  """Connect multiple existing Difficulty documents"""
  connect: [DifficultyConnectInput!]

  """
  Override currently-connected documents with multiple existing Difficulty documents
  """
  set: [DifficultyWhereUniqueInput!]

  """Update multiple Difficulty documents"""
  update: [DifficultyUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Difficulty documents"""
  upsert: [DifficultyUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Difficulty documents"""
  disconnect: [DifficultyWhereUniqueInput!]

  """Delete multiple Difficulty documents"""
  delete: [DifficultyWhereUniqueInput!]
}

input DifficultyUpdateManyInput {
  difficultyDescription: String
  difficultyOverviewDescription: String
}

input DifficultyUpdateManyWithNestedWhereInput {
  """Document search"""
  where: DifficultyWhereInput!

  """Update many input"""
  data: DifficultyUpdateManyInput!
}

input DifficultyUpdateOneInlineInput {
  """Create and connect one Difficulty document"""
  create: DifficultyCreateInput

  """Update single Difficulty document"""
  update: DifficultyUpdateWithNestedWhereUniqueInput

  """Upsert single Difficulty document"""
  upsert: DifficultyUpsertWithNestedWhereUniqueInput

  """Connect existing Difficulty document"""
  connect: DifficultyWhereUniqueInput

  """Disconnect currently connected Difficulty document"""
  disconnect: Boolean

  """Delete currently connected Difficulty document"""
  delete: Boolean
}

input DifficultyUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: DifficultyWhereUniqueInput!

  """Document to update"""
  data: DifficultyUpdateInput!
}

input DifficultyUpsertInput {
  """Create document if it didn't exist"""
  create: DifficultyCreateInput!

  """Update document if it exists"""
  update: DifficultyUpdateInput!
}

input DifficultyUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: DifficultyWhereUniqueInput!

  """Upsert data"""
  data: DifficultyUpsertInput!
}

"""Identifies documents"""
input DifficultyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [DifficultyWhereInput!]

  """Logical OR on all given filters."""
  OR: [DifficultyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DifficultyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  difficultyName: String

  """All values that are not equal to given value."""
  difficultyName_not: String

  """All values that are contained in given list."""
  difficultyName_in: [String!]

  """All values that are not contained in given list."""
  difficultyName_not_in: [String!]

  """All values containing the given string."""
  difficultyName_contains: String

  """All values not containing the given string."""
  difficultyName_not_contains: String

  """All values starting with the given string."""
  difficultyName_starts_with: String

  """All values not starting with the given string."""
  difficultyName_not_starts_with: String

  """All values ending with the given string."""
  difficultyName_ends_with: String

  """All values not ending with the given string"""
  difficultyName_not_ends_with: String
  difficultyDescription: String

  """All values that are not equal to given value."""
  difficultyDescription_not: String

  """All values that are contained in given list."""
  difficultyDescription_in: [String!]

  """All values that are not contained in given list."""
  difficultyDescription_not_in: [String!]

  """All values containing the given string."""
  difficultyDescription_contains: String

  """All values not containing the given string."""
  difficultyDescription_not_contains: String

  """All values starting with the given string."""
  difficultyDescription_starts_with: String

  """All values not starting with the given string."""
  difficultyDescription_not_starts_with: String

  """All values ending with the given string."""
  difficultyDescription_ends_with: String

  """All values not ending with the given string"""
  difficultyDescription_not_ends_with: String
  difficultyId: String

  """All values that are not equal to given value."""
  difficultyId_not: String

  """All values that are contained in given list."""
  difficultyId_in: [String!]

  """All values that are not contained in given list."""
  difficultyId_not_in: [String!]

  """All values containing the given string."""
  difficultyId_contains: String

  """All values not containing the given string."""
  difficultyId_not_contains: String

  """All values starting with the given string."""
  difficultyId_starts_with: String

  """All values not starting with the given string."""
  difficultyId_not_starts_with: String

  """All values ending with the given string."""
  difficultyId_ends_with: String

  """All values not ending with the given string"""
  difficultyId_not_ends_with: String
  difficultyOverviewDescription: String

  """All values that are not equal to given value."""
  difficultyOverviewDescription_not: String

  """All values that are contained in given list."""
  difficultyOverviewDescription_in: [String!]

  """All values that are not contained in given list."""
  difficultyOverviewDescription_not_in: [String!]

  """All values containing the given string."""
  difficultyOverviewDescription_contains: String

  """All values not containing the given string."""
  difficultyOverviewDescription_not_contains: String

  """All values starting with the given string."""
  difficultyOverviewDescription_starts_with: String

  """All values not starting with the given string."""
  difficultyOverviewDescription_not_starts_with: String

  """All values ending with the given string."""
  difficultyOverviewDescription_ends_with: String

  """All values not ending with the given string"""
  difficultyOverviewDescription_not_ends_with: String
}

"""References Difficulty record uniquely"""
input DifficultyWhereUniqueInput {
  id: ID
  difficultyName: String
  difficultyId: String
}

enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

type DocumentVersion {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
  data: Json
}

scalar Hex

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any
  parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit the specified parameters exactly by scaling the image
  to the desired size. The aspect ratio of the image is not respected and the
  image can be distorted using this method.
  """
  scale

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  will not scale the image if the image is smaller than the output size.
  """
  max
}

input ImageResizeInput {
  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""Raw JSON value"""
scalar Json

"""
One lesson, e.g. "Introduction to HTML tags"
"""
type Lesson implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Lesson!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  course(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `course` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Course
  lessonId: String!
  lessonTitle: String
  lessonShortFacts: String
  difficultyLevel: String!
  lessonObjectives: String

  """To be shown in the start of each lesson."""
  lessonIntro: String

  """The body/content of the lesson, with CodeSandboxes and all."""
  lessonBody: String!

  """References and extra info about the lesson's topic"""
  references: String

  """Returns the previous lesson"""
  previousLesson(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `previousLesson` is a model without localized fields and will not
    be affected directly by this argument, however the locales will be passed on
    to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Lesson

  """Returns the next lesson"""
  nextLesson(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `nextLesson` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Lesson

  """Name of instructor"""
  instructor: String

  """List of Lesson versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

input LessonConnectInput {
  """Document to connect"""
  where: LessonWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type LessonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessonEdge!]!
  aggregate: Aggregate!
}

input LessonCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  course: CourseCreateOneInlineInput
  lessonId: String!
  lessonTitle: String
  lessonShortFacts: String
  difficultyLevel: String!
  lessonObjectives: String
  lessonIntro: String
  lessonBody: String!
  references: String
  previousLesson: LessonCreateOneInlineInput
  nextLesson: LessonCreateOneInlineInput
  instructor: String
}

input LessonCreateManyInlineInput {
  """Create and connect multiple existing Lesson documents"""
  create: [LessonCreateInput!]

  """Connect multiple existing Lesson documents"""
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneInlineInput {
  """Create and connect one Lesson document"""
  create: LessonCreateInput

  """Connect one existing Lesson document"""
  connect: LessonWhereUniqueInput
}

"""An edge in a connection."""
type LessonEdge {
  """The item at the end of the edge."""
  node: Lesson!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input LessonManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [LessonWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  course: CourseWhereInput
  lessonId: String

  """All values that are not equal to given value."""
  lessonId_not: String

  """All values that are contained in given list."""
  lessonId_in: [String!]

  """All values that are not contained in given list."""
  lessonId_not_in: [String!]

  """All values containing the given string."""
  lessonId_contains: String

  """All values not containing the given string."""
  lessonId_not_contains: String

  """All values starting with the given string."""
  lessonId_starts_with: String

  """All values not starting with the given string."""
  lessonId_not_starts_with: String

  """All values ending with the given string."""
  lessonId_ends_with: String

  """All values not ending with the given string"""
  lessonId_not_ends_with: String
  lessonTitle: String

  """All values that are not equal to given value."""
  lessonTitle_not: String

  """All values that are contained in given list."""
  lessonTitle_in: [String!]

  """All values that are not contained in given list."""
  lessonTitle_not_in: [String!]

  """All values containing the given string."""
  lessonTitle_contains: String

  """All values not containing the given string."""
  lessonTitle_not_contains: String

  """All values starting with the given string."""
  lessonTitle_starts_with: String

  """All values not starting with the given string."""
  lessonTitle_not_starts_with: String

  """All values ending with the given string."""
  lessonTitle_ends_with: String

  """All values not ending with the given string"""
  lessonTitle_not_ends_with: String
  lessonShortFacts: String

  """All values that are not equal to given value."""
  lessonShortFacts_not: String

  """All values that are contained in given list."""
  lessonShortFacts_in: [String!]

  """All values that are not contained in given list."""
  lessonShortFacts_not_in: [String!]

  """All values containing the given string."""
  lessonShortFacts_contains: String

  """All values not containing the given string."""
  lessonShortFacts_not_contains: String

  """All values starting with the given string."""
  lessonShortFacts_starts_with: String

  """All values not starting with the given string."""
  lessonShortFacts_not_starts_with: String

  """All values ending with the given string."""
  lessonShortFacts_ends_with: String

  """All values not ending with the given string"""
  lessonShortFacts_not_ends_with: String
  difficultyLevel: String

  """All values that are not equal to given value."""
  difficultyLevel_not: String

  """All values that are contained in given list."""
  difficultyLevel_in: [String!]

  """All values that are not contained in given list."""
  difficultyLevel_not_in: [String!]

  """All values containing the given string."""
  difficultyLevel_contains: String

  """All values not containing the given string."""
  difficultyLevel_not_contains: String

  """All values starting with the given string."""
  difficultyLevel_starts_with: String

  """All values not starting with the given string."""
  difficultyLevel_not_starts_with: String

  """All values ending with the given string."""
  difficultyLevel_ends_with: String

  """All values not ending with the given string"""
  difficultyLevel_not_ends_with: String
  lessonObjectives: String

  """All values that are not equal to given value."""
  lessonObjectives_not: String

  """All values that are contained in given list."""
  lessonObjectives_in: [String!]

  """All values that are not contained in given list."""
  lessonObjectives_not_in: [String!]

  """All values containing the given string."""
  lessonObjectives_contains: String

  """All values not containing the given string."""
  lessonObjectives_not_contains: String

  """All values starting with the given string."""
  lessonObjectives_starts_with: String

  """All values not starting with the given string."""
  lessonObjectives_not_starts_with: String

  """All values ending with the given string."""
  lessonObjectives_ends_with: String

  """All values not ending with the given string"""
  lessonObjectives_not_ends_with: String
  lessonIntro: String

  """All values that are not equal to given value."""
  lessonIntro_not: String

  """All values that are contained in given list."""
  lessonIntro_in: [String!]

  """All values that are not contained in given list."""
  lessonIntro_not_in: [String!]

  """All values containing the given string."""
  lessonIntro_contains: String

  """All values not containing the given string."""
  lessonIntro_not_contains: String

  """All values starting with the given string."""
  lessonIntro_starts_with: String

  """All values not starting with the given string."""
  lessonIntro_not_starts_with: String

  """All values ending with the given string."""
  lessonIntro_ends_with: String

  """All values not ending with the given string"""
  lessonIntro_not_ends_with: String
  lessonBody: String

  """All values that are not equal to given value."""
  lessonBody_not: String

  """All values that are contained in given list."""
  lessonBody_in: [String!]

  """All values that are not contained in given list."""
  lessonBody_not_in: [String!]

  """All values containing the given string."""
  lessonBody_contains: String

  """All values not containing the given string."""
  lessonBody_not_contains: String

  """All values starting with the given string."""
  lessonBody_starts_with: String

  """All values not starting with the given string."""
  lessonBody_not_starts_with: String

  """All values ending with the given string."""
  lessonBody_ends_with: String

  """All values not ending with the given string"""
  lessonBody_not_ends_with: String
  references: String

  """All values that are not equal to given value."""
  references_not: String

  """All values that are contained in given list."""
  references_in: [String!]

  """All values that are not contained in given list."""
  references_not_in: [String!]

  """All values containing the given string."""
  references_contains: String

  """All values not containing the given string."""
  references_not_contains: String

  """All values starting with the given string."""
  references_starts_with: String

  """All values not starting with the given string."""
  references_not_starts_with: String

  """All values ending with the given string."""
  references_ends_with: String

  """All values not ending with the given string"""
  references_not_ends_with: String
  previousLesson: LessonWhereInput
  nextLesson: LessonWhereInput
  instructor: String

  """All values that are not equal to given value."""
  instructor_not: String

  """All values that are contained in given list."""
  instructor_in: [String!]

  """All values that are not contained in given list."""
  instructor_not_in: [String!]

  """All values containing the given string."""
  instructor_contains: String

  """All values not containing the given string."""
  instructor_not_contains: String

  """All values starting with the given string."""
  instructor_starts_with: String

  """All values not starting with the given string."""
  instructor_not_starts_with: String

  """All values ending with the given string."""
  instructor_ends_with: String

  """All values not ending with the given string"""
  instructor_not_ends_with: String
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  lessonId_ASC
  lessonId_DESC
  lessonTitle_ASC
  lessonTitle_DESC
  lessonShortFacts_ASC
  lessonShortFacts_DESC
  difficultyLevel_ASC
  difficultyLevel_DESC
  lessonObjectives_ASC
  lessonObjectives_DESC
  lessonIntro_ASC
  lessonIntro_DESC
  lessonBody_ASC
  lessonBody_DESC
  references_ASC
  references_DESC
  instructor_ASC
  instructor_DESC
}

input LessonUpdateInput {
  course: CourseUpdateOneInlineInput
  lessonId: String
  lessonTitle: String
  lessonShortFacts: String
  difficultyLevel: String
  lessonObjectives: String
  lessonIntro: String
  lessonBody: String
  references: String
  previousLesson: LessonUpdateOneInlineInput
  nextLesson: LessonUpdateOneInlineInput
  instructor: String
}

input LessonUpdateManyInlineInput {
  """Create and connect multiple Lesson documents"""
  create: [LessonCreateInput!]

  """Connect multiple existing Lesson documents"""
  connect: [LessonConnectInput!]

  """
  Override currently-connected documents with multiple existing Lesson documents
  """
  set: [LessonWhereUniqueInput!]

  """Update multiple Lesson documents"""
  update: [LessonUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Lesson documents"""
  upsert: [LessonUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Lesson documents"""
  disconnect: [LessonWhereUniqueInput!]

  """Delete multiple Lesson documents"""
  delete: [LessonWhereUniqueInput!]
}

input LessonUpdateManyInput {
  lessonShortFacts: String
  difficultyLevel: String
  lessonObjectives: String
  lessonIntro: String
  lessonBody: String
  references: String
  instructor: String
}

input LessonUpdateManyWithNestedWhereInput {
  """Document search"""
  where: LessonWhereInput!

  """Update many input"""
  data: LessonUpdateManyInput!
}

input LessonUpdateOneInlineInput {
  """Create and connect one Lesson document"""
  create: LessonCreateInput

  """Update single Lesson document"""
  update: LessonUpdateWithNestedWhereUniqueInput

  """Upsert single Lesson document"""
  upsert: LessonUpsertWithNestedWhereUniqueInput

  """Connect existing Lesson document"""
  connect: LessonWhereUniqueInput

  """Disconnect currently connected Lesson document"""
  disconnect: Boolean

  """Delete currently connected Lesson document"""
  delete: Boolean
}

input LessonUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: LessonWhereUniqueInput!

  """Document to update"""
  data: LessonUpdateInput!
}

input LessonUpsertInput {
  """Create document if it didn't exist"""
  create: LessonCreateInput!

  """Update document if it exists"""
  update: LessonUpdateInput!
}

input LessonUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: LessonWhereUniqueInput!

  """Upsert data"""
  data: LessonUpsertInput!
}

"""Identifies documents"""
input LessonWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [LessonWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  course: CourseWhereInput
  lessonId: String

  """All values that are not equal to given value."""
  lessonId_not: String

  """All values that are contained in given list."""
  lessonId_in: [String!]

  """All values that are not contained in given list."""
  lessonId_not_in: [String!]

  """All values containing the given string."""
  lessonId_contains: String

  """All values not containing the given string."""
  lessonId_not_contains: String

  """All values starting with the given string."""
  lessonId_starts_with: String

  """All values not starting with the given string."""
  lessonId_not_starts_with: String

  """All values ending with the given string."""
  lessonId_ends_with: String

  """All values not ending with the given string"""
  lessonId_not_ends_with: String
  lessonTitle: String

  """All values that are not equal to given value."""
  lessonTitle_not: String

  """All values that are contained in given list."""
  lessonTitle_in: [String!]

  """All values that are not contained in given list."""
  lessonTitle_not_in: [String!]

  """All values containing the given string."""
  lessonTitle_contains: String

  """All values not containing the given string."""
  lessonTitle_not_contains: String

  """All values starting with the given string."""
  lessonTitle_starts_with: String

  """All values not starting with the given string."""
  lessonTitle_not_starts_with: String

  """All values ending with the given string."""
  lessonTitle_ends_with: String

  """All values not ending with the given string"""
  lessonTitle_not_ends_with: String
  lessonShortFacts: String

  """All values that are not equal to given value."""
  lessonShortFacts_not: String

  """All values that are contained in given list."""
  lessonShortFacts_in: [String!]

  """All values that are not contained in given list."""
  lessonShortFacts_not_in: [String!]

  """All values containing the given string."""
  lessonShortFacts_contains: String

  """All values not containing the given string."""
  lessonShortFacts_not_contains: String

  """All values starting with the given string."""
  lessonShortFacts_starts_with: String

  """All values not starting with the given string."""
  lessonShortFacts_not_starts_with: String

  """All values ending with the given string."""
  lessonShortFacts_ends_with: String

  """All values not ending with the given string"""
  lessonShortFacts_not_ends_with: String
  difficultyLevel: String

  """All values that are not equal to given value."""
  difficultyLevel_not: String

  """All values that are contained in given list."""
  difficultyLevel_in: [String!]

  """All values that are not contained in given list."""
  difficultyLevel_not_in: [String!]

  """All values containing the given string."""
  difficultyLevel_contains: String

  """All values not containing the given string."""
  difficultyLevel_not_contains: String

  """All values starting with the given string."""
  difficultyLevel_starts_with: String

  """All values not starting with the given string."""
  difficultyLevel_not_starts_with: String

  """All values ending with the given string."""
  difficultyLevel_ends_with: String

  """All values not ending with the given string"""
  difficultyLevel_not_ends_with: String
  lessonObjectives: String

  """All values that are not equal to given value."""
  lessonObjectives_not: String

  """All values that are contained in given list."""
  lessonObjectives_in: [String!]

  """All values that are not contained in given list."""
  lessonObjectives_not_in: [String!]

  """All values containing the given string."""
  lessonObjectives_contains: String

  """All values not containing the given string."""
  lessonObjectives_not_contains: String

  """All values starting with the given string."""
  lessonObjectives_starts_with: String

  """All values not starting with the given string."""
  lessonObjectives_not_starts_with: String

  """All values ending with the given string."""
  lessonObjectives_ends_with: String

  """All values not ending with the given string"""
  lessonObjectives_not_ends_with: String
  lessonIntro: String

  """All values that are not equal to given value."""
  lessonIntro_not: String

  """All values that are contained in given list."""
  lessonIntro_in: [String!]

  """All values that are not contained in given list."""
  lessonIntro_not_in: [String!]

  """All values containing the given string."""
  lessonIntro_contains: String

  """All values not containing the given string."""
  lessonIntro_not_contains: String

  """All values starting with the given string."""
  lessonIntro_starts_with: String

  """All values not starting with the given string."""
  lessonIntro_not_starts_with: String

  """All values ending with the given string."""
  lessonIntro_ends_with: String

  """All values not ending with the given string"""
  lessonIntro_not_ends_with: String
  lessonBody: String

  """All values that are not equal to given value."""
  lessonBody_not: String

  """All values that are contained in given list."""
  lessonBody_in: [String!]

  """All values that are not contained in given list."""
  lessonBody_not_in: [String!]

  """All values containing the given string."""
  lessonBody_contains: String

  """All values not containing the given string."""
  lessonBody_not_contains: String

  """All values starting with the given string."""
  lessonBody_starts_with: String

  """All values not starting with the given string."""
  lessonBody_not_starts_with: String

  """All values ending with the given string."""
  lessonBody_ends_with: String

  """All values not ending with the given string"""
  lessonBody_not_ends_with: String
  references: String

  """All values that are not equal to given value."""
  references_not: String

  """All values that are contained in given list."""
  references_in: [String!]

  """All values that are not contained in given list."""
  references_not_in: [String!]

  """All values containing the given string."""
  references_contains: String

  """All values not containing the given string."""
  references_not_contains: String

  """All values starting with the given string."""
  references_starts_with: String

  """All values not starting with the given string."""
  references_not_starts_with: String

  """All values ending with the given string."""
  references_ends_with: String

  """All values not ending with the given string"""
  references_not_ends_with: String
  previousLesson: LessonWhereInput
  nextLesson: LessonWhereInput
  instructor: String

  """All values that are not equal to given value."""
  instructor_not: String

  """All values that are contained in given list."""
  instructor_in: [String!]

  """All values that are not contained in given list."""
  instructor_not_in: [String!]

  """All values containing the given string."""
  instructor_contains: String

  """All values not containing the given string."""
  instructor_not_contains: String

  """All values starting with the given string."""
  instructor_starts_with: String

  """All values not starting with the given string."""
  instructor_not_starts_with: String

  """All values ending with the given string."""
  instructor_ends_with: String

  """All values not ending with the given string"""
  instructor_not_ends_with: String
}

"""References Lesson record uniquely"""
input LessonWhereUniqueInput {
  id: ID
  lessonId: String
  lessonTitle: String
}

"""Locale system enumeration"""
enum Locale {
  sv
  en
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long
can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")

  """Update one asset"""
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Upsert one asset"""
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset

  """Publish one asset"""
  publishAsset(
    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Asset

  """
  Unpublish one asset from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishAsset(
    """Document to unpublish"""
    where: AssetWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Asset

  """Update many Asset documents"""
  updateManyAssetsConnection(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    """Documents to delete"""
    where: AssetManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): AssetConnection!

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    """Identifies documents in draft stage"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): AssetConnection!

  """Update many assets"""
  updateManyAssets(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")

  """Publish many Asset documents"""
  publishManyAssets(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Identifies documents in each stage"""
    where: AssetManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")

  """Create one course"""
  createCourse(data: CourseCreateInput!): Course

  """Update one course"""
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course

  """
  Delete one course from _all_ existing stages. Returns deleted document.
  """
  deleteCourse(
    """Document to delete"""
    where: CourseWhereUniqueInput!
  ): Course

  """Upsert one course"""
  upsertCourse(where: CourseWhereUniqueInput!, upsert: CourseUpsertInput!): Course

  """Publish one course"""
  publishCourse(
    """Document to publish"""
    where: CourseWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Course

  """
  Unpublish one course from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishCourse(
    """Document to unpublish"""
    where: CourseWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Course

  """Update many Course documents"""
  updateManyCoursesConnection(
    """Documents to apply update on"""
    where: CourseManyWhereInput

    """Updates to document content"""
    data: CourseUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CourseConnection!

  """Delete many Course documents, return deleted documents"""
  deleteManyCoursesConnection(
    """Documents to delete"""
    where: CourseManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CourseConnection!

  """Publish many Course documents"""
  publishManyCoursesConnection(
    """Identifies documents in each stage to be published"""
    where: CourseManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CourseConnection!

  """
  Find many Course documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyCoursesConnection(
    """Identifies documents in draft stage"""
    where: CourseManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): CourseConnection!

  """Update many courses"""
  updateManyCourses(
    """Documents to apply update on"""
    where: CourseManyWhereInput

    """Updates to document content"""
    data: CourseUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyCoursesConnection)")

  """Delete many Course documents"""
  deleteManyCourses(
    """Documents to delete"""
    where: CourseManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyCoursesConnection)")

  """Publish many Course documents"""
  publishManyCourses(
    """Identifies documents in each stage to be published"""
    where: CourseManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyCoursesConnection)")

  """Unpublish many Course documents"""
  unpublishManyCourses(
    """Identifies documents in each stage"""
    where: CourseManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyCoursesConnection)")

  """Create one difficulty"""
  createDifficulty(data: DifficultyCreateInput!): Difficulty

  """Update one difficulty"""
  updateDifficulty(where: DifficultyWhereUniqueInput!, data: DifficultyUpdateInput!): Difficulty

  """
  Delete one difficulty from _all_ existing stages. Returns deleted document.
  """
  deleteDifficulty(
    """Document to delete"""
    where: DifficultyWhereUniqueInput!
  ): Difficulty

  """Upsert one difficulty"""
  upsertDifficulty(where: DifficultyWhereUniqueInput!, upsert: DifficultyUpsertInput!): Difficulty

  """Publish one difficulty"""
  publishDifficulty(
    """Document to publish"""
    where: DifficultyWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Difficulty

  """
  Unpublish one difficulty from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishDifficulty(
    """Document to unpublish"""
    where: DifficultyWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Difficulty

  """Update many Difficulty documents"""
  updateManyDifficultiesConnection(
    """Documents to apply update on"""
    where: DifficultyManyWhereInput

    """Updates to document content"""
    data: DifficultyUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): DifficultyConnection!

  """Delete many Difficulty documents, return deleted documents"""
  deleteManyDifficultiesConnection(
    """Documents to delete"""
    where: DifficultyManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): DifficultyConnection!

  """Publish many Difficulty documents"""
  publishManyDifficultiesConnection(
    """Identifies documents in each stage to be published"""
    where: DifficultyManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): DifficultyConnection!

  """
  Find many Difficulty documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyDifficultiesConnection(
    """Identifies documents in draft stage"""
    where: DifficultyManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): DifficultyConnection!

  """Update many difficulties"""
  updateManyDifficulties(
    """Documents to apply update on"""
    where: DifficultyManyWhereInput

    """Updates to document content"""
    data: DifficultyUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyDifficultiesConnection)")

  """Delete many Difficulty documents"""
  deleteManyDifficulties(
    """Documents to delete"""
    where: DifficultyManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyDifficultiesConnection)")

  """Publish many Difficulty documents"""
  publishManyDifficulties(
    """Identifies documents in each stage to be published"""
    where: DifficultyManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyDifficultiesConnection)")

  """Unpublish many Difficulty documents"""
  unpublishManyDifficulties(
    """Identifies documents in each stage"""
    where: DifficultyManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyDifficultiesConnection)")

  """Create one lesson"""
  createLesson(data: LessonCreateInput!): Lesson

  """Update one lesson"""
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson

  """
  Delete one lesson from _all_ existing stages. Returns deleted document.
  """
  deleteLesson(
    """Document to delete"""
    where: LessonWhereUniqueInput!
  ): Lesson

  """Upsert one lesson"""
  upsertLesson(where: LessonWhereUniqueInput!, upsert: LessonUpsertInput!): Lesson

  """Publish one lesson"""
  publishLesson(
    """Document to publish"""
    where: LessonWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Lesson

  """
  Unpublish one lesson from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishLesson(
    """Document to unpublish"""
    where: LessonWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Lesson

  """Update many Lesson documents"""
  updateManyLessonsConnection(
    """Documents to apply update on"""
    where: LessonManyWhereInput

    """Updates to document content"""
    data: LessonUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LessonConnection!

  """Delete many Lesson documents, return deleted documents"""
  deleteManyLessonsConnection(
    """Documents to delete"""
    where: LessonManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LessonConnection!

  """Publish many Lesson documents"""
  publishManyLessonsConnection(
    """Identifies documents in each stage to be published"""
    where: LessonManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LessonConnection!

  """
  Find many Lesson documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyLessonsConnection(
    """Identifies documents in draft stage"""
    where: LessonManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): LessonConnection!

  """Update many lessons"""
  updateManyLessons(
    """Documents to apply update on"""
    where: LessonManyWhereInput

    """Updates to document content"""
    data: LessonUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyLessonsConnection)")

  """Delete many Lesson documents"""
  deleteManyLessons(
    """Documents to delete"""
    where: LessonManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyLessonsConnection)")

  """Publish many Lesson documents"""
  publishManyLessons(
    """Identifies documents in each stage to be published"""
    where: LessonManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyLessonsConnection)")

  """Unpublish many Lesson documents"""
  unpublishManyLessons(
    """Identifies documents in each stage"""
    where: LessonManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyLessonsConnection)")

  """Create one page"""
  createPage(data: PageCreateInput!): Page

  """Update one page"""
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page

  """Delete one page from _all_ existing stages. Returns deleted document."""
  deletePage(
    """Document to delete"""
    where: PageWhereUniqueInput!
  ): Page

  """Upsert one page"""
  upsertPage(where: PageWhereUniqueInput!, upsert: PageUpsertInput!): Page

  """Publish one page"""
  publishPage(
    """Document to publish"""
    where: PageWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Page

  """
  Unpublish one page from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishPage(
    """Document to unpublish"""
    where: PageWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Page

  """Update many Page documents"""
  updateManyPagesConnection(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Delete many Page documents, return deleted documents"""
  deleteManyPagesConnection(
    """Documents to delete"""
    where: PageManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Publish many Page documents"""
  publishManyPagesConnection(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): PageConnection!

  """
  Find many Page documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPagesConnection(
    """Identifies documents in draft stage"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): PageConnection!

  """Update many pages"""
  updateManyPages(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPagesConnection)")

  """Delete many Page documents"""
  deleteManyPages(
    """Documents to delete"""
    where: PageManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPagesConnection)")

  """Publish many Page documents"""
  publishManyPages(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPagesConnection)")

  """Unpublish many Page documents"""
  unpublishManyPages(
    """Identifies documents in each stage"""
    where: PageManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPagesConnection)")

  """Create one word"""
  createWord(data: WordCreateInput!): Word

  """Update one word"""
  updateWord(where: WordWhereUniqueInput!, data: WordUpdateInput!): Word

  """Delete one word from _all_ existing stages. Returns deleted document."""
  deleteWord(
    """Document to delete"""
    where: WordWhereUniqueInput!
  ): Word

  """Upsert one word"""
  upsertWord(where: WordWhereUniqueInput!, upsert: WordUpsertInput!): Word

  """Publish one word"""
  publishWord(
    """Document to publish"""
    where: WordWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Word

  """
  Unpublish one word from selected stages. Unpublish either the complete
  document with its relations, localizations and base data or specific
  localizations only.
  """
  unpublishWord(
    """Document to unpublish"""
    where: WordWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will
    completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Word

  """Update many Word documents"""
  updateManyWordsConnection(
    """Documents to apply update on"""
    where: WordManyWhereInput

    """Updates to document content"""
    data: WordUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): WordConnection!

  """Delete many Word documents, return deleted documents"""
  deleteManyWordsConnection(
    """Documents to delete"""
    where: WordManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): WordConnection!

  """Publish many Word documents"""
  publishManyWordsConnection(
    """Identifies documents in each stage to be published"""
    where: WordManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): WordConnection!

  """
  Find many Word documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyWordsConnection(
    """Identifies documents in draft stage"""
    where: WordManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): WordConnection!

  """Update many words"""
  updateManyWords(
    """Documents to apply update on"""
    where: WordManyWhereInput

    """Updates to document content"""
    data: WordUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyWordsConnection)")

  """Delete many Word documents"""
  deleteManyWords(
    """Documents to delete"""
    where: WordManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyWordsConnection)")

  """Publish many Word documents"""
  publishManyWords(
    """Identifies documents in each stage to be published"""
    where: WordManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyWordsConnection)")

  """Unpublish many Word documents"""
  unpublishManyWords(
    """Identifies documents in each stage"""
    where: WordManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyWordsConnection)")
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

"""A page with a lot of text, such as the "References" or "About" page"""
type Page implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [sv, en]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Page!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Page!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The human-readable ID of the page"""
  pageId: String!

  """All the body of the page."""
  pageBody: String

  """List of Page versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge!]!
  aggregate: Aggregate!
}

input PageCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  pageId: String!

  """pageBody input for default locale (sv)"""
  pageBody: String

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: PageCreateLocalizationsInput
}

input PageCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  pageBody: String
}

input PageCreateLocalizationInput {
  """Localization input"""
  data: PageCreateLocalizationDataInput!
  locale: Locale!
}

input PageCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [PageCreateLocalizationInput!]
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Number of items in the current page."""
  pageSize: Int
}

"""Identifies documents"""
input PageManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pageId: String

  """All values that are not equal to given value."""
  pageId_not: String

  """All values that are contained in given list."""
  pageId_in: [String!]

  """All values that are not contained in given list."""
  pageId_not_in: [String!]

  """All values containing the given string."""
  pageId_contains: String

  """All values not containing the given string."""
  pageId_not_contains: String

  """All values starting with the given string."""
  pageId_starts_with: String

  """All values not starting with the given string."""
  pageId_not_starts_with: String

  """All values ending with the given string."""
  pageId_ends_with: String

  """All values not ending with the given string"""
  pageId_not_ends_with: String
}

enum PageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  pageId_ASC
  pageId_DESC
  pageBody_ASC
  pageBody_DESC
}

input PageUpdateInput {
  pageId: String

  """pageBody input for default locale (sv)"""
  pageBody: String

  """Manage document localizations"""
  localizations: PageUpdateLocalizationsInput
}

input PageUpdateLocalizationDataInput {
  pageBody: String
}

input PageUpdateLocalizationInput {
  data: PageUpdateLocalizationDataInput!
  locale: Locale!
}

input PageUpdateLocalizationsInput {
  """Localizations to create"""
  create: [PageCreateLocalizationInput!]

  """Localizations to update"""
  update: [PageUpdateLocalizationInput!]
  upsert: [PageUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input PageUpdateManyInput {
  """pageBody input for default locale (sv)"""
  pageBody: String

  """Optional updates to localizations"""
  localizations: PageUpdateManyLocalizationsInput
}

input PageUpdateManyLocalizationDataInput {
  pageBody: String
}

input PageUpdateManyLocalizationInput {
  data: PageUpdateManyLocalizationDataInput!
  locale: Locale!
}

input PageUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [PageUpdateManyLocalizationInput!]
}

input PageUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PageWhereInput!

  """Update many input"""
  data: PageUpdateManyInput!
}

input PageUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Document to update"""
  data: PageUpdateInput!
}

input PageUpsertInput {
  """Create document if it didn't exist"""
  create: PageCreateInput!

  """Update document if it exists"""
  update: PageUpdateInput!
}

input PageUpsertLocalizationInput {
  update: PageUpdateLocalizationDataInput!
  create: PageCreateLocalizationDataInput!
  locale: Locale!
}

input PageUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Upsert data"""
  data: PageUpsertInput!
}

"""Identifies documents"""
input PageWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  pageId: String

  """All values that are not equal to given value."""
  pageId_not: String

  """All values that are contained in given list."""
  pageId_in: [String!]

  """All values that are not contained in given list."""
  pageId_not_in: [String!]

  """All values containing the given string."""
  pageId_contains: String

  """All values not containing the given string."""
  pageId_not_contains: String

  """All values starting with the given string."""
  pageId_starts_with: String

  """All values not starting with the given string."""
  pageId_not_starts_with: String

  """All values ending with the given string."""
  pageId_ends_with: String

  """All values not ending with the given string"""
  pageId_not_ends_with: String
  pageBody: String

  """All values that are not equal to given value."""
  pageBody_not: String

  """All values that are contained in given list."""
  pageBody_in: [String!]

  """All values that are not contained in given list."""
  pageBody_not_in: [String!]

  """All values containing the given string."""
  pageBody_contains: String

  """All values not containing the given string."""
  pageBody_not_contains: String

  """All values starting with the given string."""
  pageBody_starts_with: String

  """All values not starting with the given string."""
  pageBody_not_starts_with: String

  """All values ending with the given string."""
  pageBody_ends_with: String

  """All values not ending with the given string"""
  pageBody_not_ends_with: String
}

"""References Page record uniquely"""
input PageWhereUniqueInput {
  id: ID
  pageId: String
}

input PublishLocaleInput {
  """Locales to publish"""
  locale: Locale!

  """Stages to publish selected locales to"""
  stages: [Stage!]!
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Node` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Node

  """Retrieve multiple assets"""
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Asset!]!

  """Retrieve a single asset"""
  asset(
    where: AssetWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Asset

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): AssetConnection!

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple courses"""
  courses(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Course` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Course!]!

  """Retrieve a single course"""
  course(
    where: CourseWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Course` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Course

  """Retrieve multiple courses using the Relay connection interface"""
  coursesConnection(
    where: CourseWhereInput
    orderBy: CourseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Course` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): CourseConnection!

  """Retrieve document version"""
  courseVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple difficulties"""
  difficulties(
    where: DifficultyWhereInput
    orderBy: DifficultyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Difficulty` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Difficulty!]!

  """Retrieve a single difficulty"""
  difficulty(
    where: DifficultyWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Difficulty` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Difficulty

  """Retrieve multiple difficulties using the Relay connection interface"""
  difficultiesConnection(
    where: DifficultyWhereInput
    orderBy: DifficultyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Difficulty` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): DifficultyConnection!

  """Retrieve document version"""
  difficultyVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple lessons"""
  lessons(
    where: LessonWhereInput
    orderBy: LessonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Lesson` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Lesson!]!

  """Retrieve a single lesson"""
  lesson(
    where: LessonWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Lesson` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Lesson

  """Retrieve multiple lessons using the Relay connection interface"""
  lessonsConnection(
    where: LessonWhereInput
    orderBy: LessonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Lesson` is a model without localized fields and will not be
    affected directly by this argument, however the locales will be passed on to
    any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first
    locale matching the provided list of locales will be returned, entries with
    non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): LessonConnection!

  """Retrieve document version"""
  lessonVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple pages"""
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Page!]!

  """Retrieve a single page"""
  page(
    where: PageWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Page

  """Retrieve multiple pages using the Relay connection interface"""
  pagesConnection(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): PageConnection!

  """Retrieve document version"""
  pageVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple words"""
  words(
    where: WordWhereInput
    orderBy: WordOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Word` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): [Word!]!

  """Retrieve a single word"""
  word(
    where: WordWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Word` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): Word

  """Retrieve multiple words using the Relay connection interface"""
  wordsConnection(
    where: WordWhereInput
    orderBy: WordOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Word` will be affected directly by this argument, as well as any
    other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a
    relational child field, this will effectively use the overwritten argument
    for the affected query's subtree.
    """
    locales: [Locale!]! = [sv]
  ): WordConnection!

  """Retrieve document version"""
  wordVersion(where: VersionWhereInput!): DocumentVersion
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
  """Returns AST representation"""
  raw: RichTextAST!

  """Returns HTMl representation"""
  html: String!

  """Returns Markdown representation"""
  markdown: String!

  """Returns plain-text contents of RichText"""
  text: String!
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

"""Stage system enumeration"""
enum Stage {
  """The Published stage is where you can publish your content to."""
  PUBLISHED

  """The Draft is the default stage for all your content."""
  DRAFT
}

enum SystemDateTimeFieldVariation {
  BASE
  LOCALIZATION
  COMBINED
}

input UnpublishLocaleInput {
  """Locales to unpublish"""
  locale: Locale!

  """Stages to unpublish selected locales from"""
  stages: [Stage!]!
}

"""System User Kind"""
enum UserKind {
  MEMBER
  PAT
  PUBLIC
  WEBHOOK
}

type Version {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
}

input VersionWhereInput {
  id: ID!
  stage: Stage!
  revision: Int!
}

"""String of one or multiple words"""
type Word implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [sv, en]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Word!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Word!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document,
    current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The string of a word or multiple words"""
  word: String

  """The human-readable ID of the word"""
  wordId: String!

  """List of Word versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

"""A connection to a list of items."""
type WordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WordEdge!]!
  aggregate: Aggregate!
}

input WordCreateInput {
  createdAt: DateTime
  updatedAt: DateTime

  """word input for default locale (sv)"""
  word: String
  wordId: String!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: WordCreateLocalizationsInput
}

input WordCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  word: String
}

input WordCreateLocalizationInput {
  """Localization input"""
  data: WordCreateLocalizationDataInput!
  locale: Locale!
}

input WordCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [WordCreateLocalizationInput!]
}

"""An edge in a connection."""
type WordEdge {
  """The item at the end of the edge."""
  node: Word!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input WordManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [WordWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  wordId: String

  """All values that are not equal to given value."""
  wordId_not: String

  """All values that are contained in given list."""
  wordId_in: [String!]

  """All values that are not contained in given list."""
  wordId_not_in: [String!]

  """All values containing the given string."""
  wordId_contains: String

  """All values not containing the given string."""
  wordId_not_contains: String

  """All values starting with the given string."""
  wordId_starts_with: String

  """All values not starting with the given string."""
  wordId_not_starts_with: String

  """All values ending with the given string."""
  wordId_ends_with: String

  """All values not ending with the given string"""
  wordId_not_ends_with: String
}

enum WordOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  word_ASC
  word_DESC
  wordId_ASC
  wordId_DESC
}

input WordUpdateInput {
  """word input for default locale (sv)"""
  word: String
  wordId: String

  """Manage document localizations"""
  localizations: WordUpdateLocalizationsInput
}

input WordUpdateLocalizationDataInput {
  word: String
}

input WordUpdateLocalizationInput {
  data: WordUpdateLocalizationDataInput!
  locale: Locale!
}

input WordUpdateLocalizationsInput {
  """Localizations to create"""
  create: [WordCreateLocalizationInput!]

  """Localizations to update"""
  update: [WordUpdateLocalizationInput!]
  upsert: [WordUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

input WordUpdateManyInput {
  """word input for default locale (sv)"""
  word: String
  wordId: String

  """Optional updates to localizations"""
  localizations: WordUpdateManyLocalizationsInput
}

input WordUpdateManyLocalizationDataInput {
  word: String
}

input WordUpdateManyLocalizationInput {
  data: WordUpdateManyLocalizationDataInput!
  locale: Locale!
}

input WordUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [WordUpdateManyLocalizationInput!]
}

input WordUpdateManyWithNestedWhereInput {
  """Document search"""
  where: WordWhereInput!

  """Update many input"""
  data: WordUpdateManyInput!
}

input WordUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: WordWhereUniqueInput!

  """Document to update"""
  data: WordUpdateInput!
}

input WordUpsertInput {
  """Create document if it didn't exist"""
  create: WordCreateInput!

  """Update document if it exists"""
  update: WordUpdateInput!
}

input WordUpsertLocalizationInput {
  update: WordUpdateLocalizationDataInput!
  create: WordCreateLocalizationDataInput!
  locale: Locale!
}

input WordUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: WordWhereUniqueInput!

  """Upsert data"""
  data: WordUpsertInput!
}

"""Identifies documents"""
input WordWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [WordWhereInput!]

  """Logical OR on all given filters."""
  OR: [WordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  word: String

  """All values that are not equal to given value."""
  word_not: String

  """All values that are contained in given list."""
  word_in: [String!]

  """All values that are not contained in given list."""
  word_not_in: [String!]

  """All values containing the given string."""
  word_contains: String

  """All values not containing the given string."""
  word_not_contains: String

  """All values starting with the given string."""
  word_starts_with: String

  """All values not starting with the given string."""
  word_not_starts_with: String

  """All values ending with the given string."""
  word_ends_with: String

  """All values not ending with the given string"""
  word_not_ends_with: String
  wordId: String

  """All values that are not equal to given value."""
  wordId_not: String

  """All values that are contained in given list."""
  wordId_in: [String!]

  """All values that are not contained in given list."""
  wordId_not_in: [String!]

  """All values containing the given string."""
  wordId_contains: String

  """All values not containing the given string."""
  wordId_not_contains: String

  """All values starting with the given string."""
  wordId_starts_with: String

  """All values not starting with the given string."""
  wordId_not_starts_with: String

  """All values ending with the given string."""
  wordId_ends_with: String

  """All values not ending with the given string"""
  wordId_not_ends_with: String
}

"""References Word record uniquely"""
input WordWhereUniqueInput {
  id: ID
}

